# Generated by Django 4.2.21 on 2025-05-19 05:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('payments', '0002_airequestlog'),
    ]

    operations = [
        migrations.CreateModel(
            name='ImportLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=255)),
                ('import_type', models.CharField(choices=[('EASYPAY', 'EasyPay'), ('LINKSERV', 'Linkserv Debit Order'), ('AGENT', 'Agent Onboarding'), ('BANK', 'Bank Reconciliation'), ('AMENDMENT', 'Policy Amendments'), ('REACTIVATION', 'Policy Reactivations'), ('OTHER', 'Other Import')], max_length=20)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('PARTIAL', 'Partially Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('imported_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('total_records', models.PositiveIntegerField(default=0)),
                ('successful_records', models.PositiveIntegerField(default=0)),
                ('failed_records', models.PositiveIntegerField(default=0)),
                ('notes', models.TextField(blank=True, null=True)),
                ('error_file', models.FileField(blank=True, null=True, upload_to='import_errors/')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='imports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Import Log',
                'verbose_name_plural': 'Import Logs',
                'ordering': ['-imported_at'],
            },
        ),
        migrations.AddField(
            model_name='payment',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='User who created this payment record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_payments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='payment',
            name='ip_address',
            field=models.GenericIPAddressField(blank=True, help_text='IP address of the user who created/updated this payment', null=True),
        ),
        migrations.AddField(
            model_name='payment',
            name='reference_number',
            field=models.CharField(blank=True, help_text='External reference number (e.g., EasyPay or bank reference)', max_length=100, null=True),
        ),
        migrations.AddField(
            model_name='payment',
            name='status',
            field=models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('REFUNDED', 'Refunded')], default='COMPLETED', help_text='Current status of the payment', max_length=20),
        ),
        migrations.AddField(
            model_name='payment',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='User who last updated this payment record', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_payments', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='paymentreceipt',
            name='pdf_file',
            field=models.FileField(blank=True, help_text='PDF version of the receipt', null=True, upload_to='receipts/'),
        ),
        migrations.AddField(
            model_name='paymentreceipt',
            name='sent_at',
            field=models.DateTimeField(blank=True, help_text='When the receipt was sent', null=True),
        ),
        migrations.AddField(
            model_name='paymentreceipt',
            name='sent_by',
            field=models.ForeignKey(blank=True, help_text='User who sent this receipt', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sent_receipts', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='paymentreceipt',
            name='sent_to',
            field=models.CharField(blank=True, help_text='Email or phone number where receipt was sent', max_length=255, null=True),
        ),
        migrations.AddField(
            model_name='paymentreceipt',
            name='status',
            field=models.CharField(choices=[('GENERATED', 'Generated'), ('PRINTED', 'Printed'), ('EMAILED', 'Emailed'), ('WHATSAPP', 'Sent via WhatsApp'), ('DOWNLOADED', 'Downloaded')], default='GENERATED', help_text='Current status of the receipt', max_length=20),
        ),
        migrations.AlterField(
            model_name='airequestlog',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_ai_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='payment',
            name='payment_method',
            field=models.CharField(choices=[('CASH', 'Cash'), ('CHECK', 'Check'), ('CREDIT', 'Credit Card'), ('BANK_TRANSFER', 'Bank Transfer'), ('DEBIT_ORDER', 'Debit Order'), ('EASYPAY', 'EasyPay'), ('OTHER', 'Other')], help_text='Method used for payment', max_length=20),
        ),
        migrations.CreateModel(
            name='RowLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('row_number', models.PositiveIntegerField()),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('ERROR', 'Error'), ('UNMATCHED', 'Unmatched'), ('FIXED', 'Manually Fixed'), ('PENDING', 'Pending')], max_length=20)),
                ('data', models.TextField()),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fixed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='fixed_rows', to=settings.AUTH_USER_MODEL)),
                ('import_log', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rows', to='payments.importlog')),
            ],
            options={
                'verbose_name': 'Row Log',
                'verbose_name_plural': 'Row Logs',
                'ordering': ['row_number'],
            },
        ),
        migrations.CreateModel(
            name='PaymentImport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('import_type', models.CharField(choices=[('EASYPAY', 'EasyPay Import'), ('LINKSERV', 'Linkserv Debit Order Import'), ('OTHER', 'Other Import')], help_text='Type of payment import', max_length=20)),
                ('file', models.FileField(help_text='Imported file (CSV, TXT, or Excel)', upload_to='payment_imports/')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('PARTIAL', 'Partially Completed')], default='PENDING', help_text='Current status of the import', max_length=20)),
                ('imported_at', models.DateTimeField(auto_now_add=True, help_text='When the file was imported')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When the import was processed', null=True)),
                ('total_records', models.IntegerField(default=0, help_text='Total number of records in the import')),
                ('successful_records', models.IntegerField(default=0, help_text='Number of successfully processed records')),
                ('failed_records', models.IntegerField(default=0, help_text='Number of failed records')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the import')),
                ('imported_by', models.ForeignKey(help_text='User who imported this file', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payment_imports', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ImportRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('MATCHED', 'Matched'), ('UNMATCHED', 'Unmatched'), ('PROCESSED', 'Processed'), ('FAILED', 'Failed'), ('MANUAL', 'Manually Processed')], default='PENDING', help_text='Current status of this import record', max_length=20)),
                ('reference', models.CharField(blank=True, help_text='Reference number from the import', max_length=255, null=True)),
                ('identifier', models.CharField(blank=True, help_text='Member identifier (ID, policy number, EasyPay number)', max_length=255, null=True)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount in the import', max_digits=10)),
                ('date', models.DateField(help_text='Date of the payment in the import')),
                ('raw_data', models.JSONField(help_text='Raw data from the import file')),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed', null=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When this record was processed', null=True)),
                ('payment', models.ForeignKey(blank=True, help_text='The payment created from this record (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='import_records', to='payments.payment')),
                ('payment_import', models.ForeignKey(help_text='The import this record belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='records', to='payments.paymentimport')),
                ('processed_by', models.ForeignKey(blank=True, help_text='User who processed this record (if manual)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_import_records', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
